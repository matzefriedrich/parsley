{{- /* Package declaration */ -}}
package mocks

{{- /* Import statements */ -}}
{{- if .Imports }}
import (
    {{- range .Imports }}
    "{{ . }}"
    {{- end }}
)
{{- end }}

{{- /* Loop over interfaces */ -}}
{{ range .Interfaces }}
{{- $interfaceName := .Name }}
{{- $mockStructName := printf "%sMock" (.Name | asPrivate) }}

{{- /* Define the mock struct with func fields for each method */ -}}
type {{ $mockStructName }} struct {
    {{- range .Methods }}
    {{ .Name | asPrivate }} {{ .Name }}Func
    {{- end }}
}

{{- /* Define func types for each method */ -}}
{{ range .Methods }}
type {{ .Name }}Func func(
    {{- range $i, $param := .Parameters }}
    {{ if $i }}, {{ end }}{{ $param.Name }} {{ $param.TypeName }}
    {{- end }}
) (
    {{- range $i, $result := .Results }}
    {{ if $i }}, {{ end }}{{ $result.TypeName }}
    {{- end }}
)
{{ end }}

{{- /* Define methods for each function, implementing the interface */ -}}
{{ range .Methods }}
func (m {{ $mockStructName }}) {{ .Name }}(
    {{- range $i, $param := .Parameters }}
    {{ if $i }}, {{ end }}{{ $param.Name }} {{ $param.TypeName }}
    {{- end }}
) (
    {{- range $i, $result := .Results }}
    {{ if $i }}, {{ end }}{{ $result.TypeName }}
    {{- end }}
) {
    return m.{{ .Name | asPrivate }}(
        {{- range $i, $param := .Parameters }}
        {{ if $i }}, {{ end }}{{ $param.Name }}
        {{- end }}
    )
}
{{ end }}

{{- /* Interface implementation assertion */ -}}
var _ {{ $interfaceName }} = (*{{ $mockStructName }})(nil)

{{- /* Define a constructor for the mock */ -}}
func New{{ $interfaceName }}Mock(
    {{- range $i, $method := .Methods }}
    {{ if $i }}, {{ end }}{{ $method.Name | asPrivate }} {{ $method.Name }}Func
    {{- end }}
) *{{ $mockStructName }} {
    return &{{ $mockStructName }}{
        {{- range .Methods }}
        {{ .Name | asPrivate }}: {{ .Name | asPrivate }},
        {{- end }}
    }
}

{{ end }}
