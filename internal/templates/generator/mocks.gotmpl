{{- /*gotype: import "github.com/matzefriedrich/parsley/pkg/features" */ -}}
// Code generated by parsley-cli; DO NOT EDIT.
//
// This file was automatically generated and any changes to it will be overwritten.
{{ "\n" }}

{{- /* Package declaration */ -}}
package {{ .PackageName }}

{{ "" }}

{{- /* Import statements */ -}}
{{- if .Imports }}
import (
    {{- range .Imports }}
    "{{ . }}"
    {{- end }}
)
{{ "" }}
{{- end }}

{{- /* Loop over interfaces */ -}}
{{ range .Interfaces }}
{{- $interfaceName := .Name }}
{{- $mockStructName := printf "%sMock" (.Name | asPrivate) }}

{{- /* Define the mock struct with func fields for each method */ -}}
type {{ $mockStructName }} struct {
	features.MockBase
    {{- range .Methods }}
    {{ .Name | asPublic }}Func {{ .Name }}Func
    {{- end }}
}

{{- "\n" -}}

{{- /* Define func types for each method */ -}}
{{- range .Methods }}
type {{ .Name }}Func func({{ FormattedParameters . }}) {{ FormattedResultTypes . }}
{{- end }}

{{- "\n" -}}

{{- if .Methods }}
const (
{{- range .Methods }}
    Function{{ .Name }} = "{{ .Name }}"
{{- end }}
)
{{ "" }}
{{- end }}

{{- "\n" -}}


{{- /* Define methods for each function, implementing the interface */ -}}
{{ range .Methods }}
func (m *{{ $mockStructName }}) {{ .Name }}({{ FormattedParameters . }}) {{ FormattedResultTypes . }} {
    m.TraceMethodCall(Function{{ .Name }}, {{ FormattedCallParameters . }})
    {{- if HasResults . }}
    return m.{{ .Name | asPublic }}Func({{ FormattedCallParameters . }})
    {{- else }}
    m.{{ .Name | asPublic }}Func({{ FormattedCallParameters . }})
    {{- end }}
}
{{ end }}

{{- "\n" -}}

{{- /* Interface implementation assertion */ -}}
var _ {{ $interfaceName }} = (*{{ $mockStructName }})(nil)

{{ "" }}

{{- /* Define a constructor for the mock */ -}}
// New{{ $interfaceName }}Mock Creates a new configurable {{ $mockStructName }} object.
func New{{ $interfaceName }}Mock() *{{ $mockStructName }} {
	mock := &{{ $mockStructName }}{
        MockBase: features.NewMockBase(),
        {{- range .Methods }}
		{{- if HasResults . }}
        {{ .Name | asPublic }}Func: func({{ FormattedParameters . }}) {{ FormattedResultTypes . }} {
			{{- range .Results }}
			var {{ .Name }} {{ FormatType . }}
			{{- end}}
			return {{ FormattedResultParameters . }}
		},
		{{- else }}
        {{ .Name | asPublic }}Func: func({{ FormattedParameters . }}) {{ FormattedResultTypes . }} {},
		{{- end }}
        {{- end }}
    }
    {{- range .Methods }}
    mock.AddFunction(Function{{.Name}}, "{{ Signature . }}")
    {{- end }}
	return mock
}
{{ end }}
