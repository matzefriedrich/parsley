{{- /*gotype: import "github.com/matzefriedrich/parsley/pkg/features" */ -}}
// Code generated by parsley-cli; DO NOT EDIT.
//
// This file was automatically generated and any changes to it will be overwritten.
// To extend or modify the behavior of this code, implement the MethodInterceptor interface and provide your custom logic there.

package {{.PackageName}}

import ({{range $i, $path := .Imports}}
    "{{$path}}"
{{end}})
{{range $i, $interface := .Interfaces}}
// {{$interface.Name}}ProxyImpl A generated proxy service type for {{$interface.Name}} objects.
type {{$interface.Name}}ProxyImpl struct {
    features.ProxyBase
    target {{$interface.Name}}
}

{{ $proxyInterfaceTypeName := printf "%sProxy" $interface.Name }}
// {{$proxyInterfaceTypeName}} An interface type for {{$interface.Name}} objects. Parsley needs this to distinguish the proxy from the actual implementation.
type {{$proxyInterfaceTypeName}} interface {
    {{$interface.Name}}
}

{{ $proxyTypeName := printf "%sProxyImpl" $interface.Name }}
// New{{$proxyTypeName}} Creates a new {{$interface.Name}}Proxy object. Register this constructor method with the registry.
func New{{$proxyTypeName}}(target {{$interface.Name}}, interceptors []features.MethodInterceptor) {{$proxyInterfaceTypeName}} {
    return &{{$proxyTypeName}}{
        ProxyBase: features.NewProxyBase(target, interceptors),
        target:    target,
    }
}
{{end}}{{range
    $i, $interface := .Interfaces}}{{range $m, $method := .Methods}}
func (p *{{$interface.Name}}ProxyImpl) {{$method.Name}}({{$method.FormattedParameters}}) {{$method.FormattedResultTypes}} {

    const methodName = "{{$method.Name}}"
    parameters := map[string]interface{}{ {{range
        $p, $parameter := .Parameters}}
		"{{$parameter.Name}}": {{$parameter.Name}},
{{end}}	}

	callContext := features.NewMethodCallContext(methodName, parameters)
	p.InvokeEnterMethodInterceptors(callContext)
	defer func() {
	    p.InvokeExitMethodInterceptors(callContext)
	}()
    {{if $method.HasResults }}
    {{$method.FormattedResultParameters}} := p.target.{{$method.Name}}({{$method.FormattedCallParameters}})
    p.InvokeMethodErrorInterceptors(callContext, {{$method.FormattedResultParameters}})
    return {{$method.FormattedResultParameters}}{{else}}
    p.target.{{$method.Name}}({{$method.FormattedCallParameters}}){{end}}
}
{{end}}{{end}}
{{range
    $i, $interface := .Interfaces}}var _ {{$interface.Name}} = &{{$interface.Name}}ProxyImpl{}
{{end}}