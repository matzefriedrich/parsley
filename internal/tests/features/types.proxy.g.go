// Code generated by parsley-cli; DO NOT EDIT.
//
// This file was automatically generated and any changes to it will be overwritten.
// To extend or modify the behavior of this code, implement the MethodInterceptor interface and provide your custom logic there.

package features

import (
	"github.com/matzefriedrich/parsley/pkg/features"
)

// greeterProxyImpl A generated proxy service type for Greeter objects.
type greeterProxyImpl struct {
	features.ProxyBase
	target Greeter
}

// GreeterProxy An interface type for Greeter objects. Parsley needs this to distinguish the proxy from the actual implementation.
type GreeterProxy interface {
	Greeter
}

// NewGreeterProxyImpl Creates a new GreeterProxy object. Register this constructor method with the registry.
func NewGreeterProxyImpl(target Greeter, interceptors []features.MethodInterceptor) GreeterProxy {
	return &greeterProxyImpl{
		ProxyBase: features.NewProxyBase(target, interceptors),
		target:    target,
	}
}

func (p *greeterProxyImpl) SayHello(name string, polite bool) (string, error) {

	const methodName = "SayHello"
	parameters := map[string]interface{}{
		"name": name,

		"polite": polite,
	}

	callContext := features.NewMethodCallContext(methodName, parameters)
	p.InvokeEnterMethodInterceptors(callContext)
	defer func() {
		p.InvokeExitMethodInterceptors(callContext)
	}()

	result0, result1 := p.target.SayHello(name, polite)
	p.InvokeMethodErrorInterceptors(callContext, result0, result1)
	return result0, result1
}

func (p *greeterProxyImpl) SayNothing() {

	const methodName = "SayNothing"
	parameters := map[string]interface{}{}

	callContext := features.NewMethodCallContext(methodName, parameters)
	p.InvokeEnterMethodInterceptors(callContext)
	defer func() {
		p.InvokeExitMethodInterceptors(callContext)
	}()

	p.target.SayNothing()
}

var _ Greeter = &greeterProxyImpl{}
